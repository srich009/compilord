## test harness for phase3
## mini-l statements must be syntactically && semantically correct
## compiler should generate valid executable mil code
## comment in/out chunks to test different parts

## main does not have a return
## all other functions return a scalar
##----------------------------------------

function main;

beginparams

    ## none

endparams

beginlocals

    ## TEST: declare integer
    ## PASS: can declare local integers single/comma list way
        i : integer;
        j,k : integer;

    ## TEST: declare array
    ## PASS: can declare local array of integers
        a : array [5]  of integer;
        b : array [10] of integer;

endlocals

beginbody

    ## TEST: read write integers (i,j,k)
    ## PASS: can read and write integers single/comma list way
        ## read  i;
        ## write i;
        ## read  j,k;
        ## write j,k;

    ## TEST: read write array (a,b)
    ## PASS: can read and write arrays
        ## read  a[0];
        ## write a[0];
        ## read  b[1];
        ## write b[1];

    ## TEST: assign integer/array (j,k,a,b)
    ## PASS: int = num
    ## FAIL: everything else
        j := 0;        write j;     ## int = num --> PASS
        k := j;        write k;     ## int = int --> crash out of bounds error
        ## a[0] := 1;     write a[0];  ## arr = num
        ## b[0] := 2;     write b[0];  ## arr = num
        ## a[0] := j;     write a[0];  ## arr = int
        ## a[0] := b[0];  write a[0];  ## arr = arr
        ## k := a[0];     write k;     ## int = arr

    ## TEST: arithmetic (i,j,k)
    ## PASS: none
    ## FAIL: all
        ## num op num
        ## i := 0;
        ## i := 5 + 3;  write i;  i := 0;  ## 8
        ## i := 5 - 3;  write i;  i := 0;  ## 2
        ## i := 5 * 3;  write i;  i := 0;  ## 15
        ## i := 5 / 3;  write i;  i := 0;  ## 1
        ## i := 5 % 3;  write i;  i := 0;  ## 2
        ## int op num
        ## i := 0;  j := 5;
        ## i := j + 3;  write i;  i := 0;  ## 8
        ## i := j - 3;  write i;  i := 0;  ## 2
        ## i := j * 3;  write i;  i := 0;  ## 15
        ## i := j / 3;  write i;  i := 0;  ## 1
        ## i := j % 3;  write i;  i := 0;  ## 2
        ## num op int
        ## i := 0;  k := 3;
        ## i := 5 + k;  write i;  i := 0;  ## 8
        ## i := 5 - k;  write i;  i := 0;  ## 2
        ## i := 5 * k;  write i;  i := 0;  ## 15
        ## i := 5 / k;  write i;  i := 0;  ## 1
        ## i := 5 % k;  write i;  i := 0;  ## 2
        ## int op int
        ## i := 0;  j := 5;  k := 3;
        ## i := j + k;  write i;  i := 0;  ## 8
        ## i := j - k;  write i;  i := 0;  ## 2
        ## i := j * k;  write i;  i := 0;  ## 15
        ## i := j / k;  write i;  i := 0;  ## 1
        ## i := j % k;  write i;  i := 0;  ## 2

endbody
