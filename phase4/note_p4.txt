
Design Commentary:

-------------------

The compiler is implemented with Flex and Bison in C++11.
The lex file specifies the scanner/lexical analyzer and describes the valid tokens and rules. (used for yylex() function)
The y file specifies the grammar rules, their precedence, and the semantic actions that go with them. (used for yyparse() function)
Most rules generate some mil code and/or modify the global data structures.

unique things in the lex file:
- need to #include "y.tab.h" for the automatically generated file
- comments need to be tabbed over or it causes errors

unique things in the y file:
- need to declare extern FILE* yyin; to remove a compiler error "error: ‘yyin’ was not declared in this scope"
- need to declare extern int yylex(void); to remove a compiler error "error: ‘yylex’ was not declared in this scope"

The Data Structures in the y file:


string funs;              // used to write out a whole function to a string from milvec
vector<string> funslst;   // hold all the compiled function strings
    There is a global symbol table for functions (DOESN"T: that specifies the number of parameters for each.)
    A function's symbol table includes its parameters and locals without distinction between them.
    Each variable has a non-negative size attribute, which is zero iff the variable is a scalar.
    That table is a strings-to-integers map that exists during and only during the compilation of that function.


Even though a function's symbol table doesn't need to be accessed
beyond the end of the function's declaration, it would be a good idea
to keep it around for debugging and dynamic bounds-checking.



