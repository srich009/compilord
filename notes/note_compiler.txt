Compiler design notes

the compiler is rewritten and doesnt use the stringstream anymore.
now instead there is a vector<string> milvec for the generated code.
each rule builds a string and then when done string is push_back to milvec.
the branches/loops basically have a special part where when a bool is encountered it sets a flag.
then while the bool flag is set code form statements goes to another vector of strings brstmts.
when all of the statements in that arm of the branch are added it returns to the if rule.
in the if rule the vector is output between the correct labels

this needs to be re-factored and cleaned up, probably a lot of subtly broken code...

#----------------------------------------

SUCCESSFUL FILE COMPILATION

fibonacci.min

#----------------------------------------


COMPLETED TASKS
anything with a "*" is not 100% complete, see section on broken stuff (arrays)
anything with a "//" is not implemented yet

integer ( negative/zero/positive )
arrays  ( size >= 1 )

DECLARE
    declare local integer
    declare local integers in a list
    declare local array of integer
    declare parameter integer
READ
    read integer
    read integers in a list
    read array index *
WRITE
    write integer
    write integers in a list
    write array index *
ASSIGN
    assign number to integer
    assign integer to integer
    assign number to array index *
    assign integer to array index *
    // assign array index to integer
    // assign array index to array index
ARITHMETIC
    add, sub, mul, div, mod
    works for most expression combinations including parenthesis
BOOLEANS
    // ...

#----------------------------------------

TO DO/BROKEN

* broken stuff (FIXME)

    --> array index subscripting
        the index has to be a number not variable or expression
        either parses wrong outputs incorrect or usually crashes
            read a[i-1];
            a[j+1]; := i;

    --> read/write
        if use an array with non number index then makes incorrect code
        read a[i]; becomes .[]< a, i
        but actually this produces 2 scalar reads of the index variable
            .< i
            .< i

    --> array index on rhs of expression
            i := a[0] + 1; write i;
         should output 2, but it doesn't
         does 0 + 1, doesnt see the a and adds the index instead.

#----------------------------------------

TASK DESCRIPTIONS

* function calls and passing parameters (NOT STARTED)
    in the call instruction need to do parameters part maybe make a temp var for each parameter?

    can output one parameter as the last entry in expvec
    able to declare a temp var for the destination and pass that to call,
    now just need to figure out how to do multiple parameters


* branch, loops, jump, label (NOT STARTED)
    have not figured out to do labels or jumping with branches and loops
    also need the bool stuff to work first since branches use comparisons to jump to a label,
    and loops would get implemented as blocks of code with a compare and jump.
    if while loop, compare on top and either jump over or run block and jump back to top
    if do loop, label on top and compare at bottom, run block then compare and either jump to top or continue

    if x then y; else z; endif;

    ?= l_true, x
    : l_false
        z
        := l_end
    : l_true
        y
    : l_end



* booleans, comparisons (NOT STARTED)
    trying to do like the arithmetic examples
    not is probably done like a negative number

    the code output is handled basically just like the expressions are.
    but there is a flag called bools which is used so code in a branch gets output at the right place.
    each boolean will set bools to 1 and it gets set back to 0 at the end of a branch/loop.
    when a statement is about to write code if bools == 1 then it writes to brstmts instead of the milvec.



* arithmetic (fixme)

    most things are like "i := 1+2;"
    the assign comes after the arithmetic

    have to collect up the stuff needed as values
    declare some temps and set them equal to the values
    declare a temp for the result
    add the temps and store to result
    that result should get set to the assign statement

    the math rules set a flag maths to 1 so the assign rule can know it is using an expression as the right side.
    in this case it would then use the label of the last temp variable created.

    for example an addition assignment
        i := 5 + 3
    would print something like
        . tmp1
        = tmp1, 5
        .tmp2
        = tmp2, 3
        .tmp3
        + tmp3, tmp1, tmp2
    then the assign would use the last temp variable declared
        = i, tmp3

    --> the array index on the rhs does not properly parse


* assignment (fixme)
    the "=" is used in statement for ASSIGN, and maybe var or elsewhere because of the temporary variables created.
    if assign is "id := expr" then any expression can be complex but eventually returns an int
    have to figure out when = vs []= or =[], have to check the type before

    scalars are more straight forward, the yylval.ival or yylval.sval is the source value, no indexing.
    with arrays the yylval.ival or yylval.sval is the source value to assign to destination
    dst[idx] = src; --> []= dst, idx, src
    the index is saved to a vector in the var rule.
    have a variable check flag called vtag used in assignment.
    it gets set in the term rule, numbers get 0, ids get 1.
    this is so can tell apart index type, this is why used the vtag:
    cant use yylval.sval to branch because if a[0] := 2 then yylval.sval is 0x2 and then not == NULL
    so can't say if(yylval.sval){...} because it isnt == NULL == 0
    basically only works if src is not 0

    negative numbers, MIL supports them but cant seem to assign them
    negative numbers can be read/write but crash an assign statement and outputs error "Resolution of argument -1 failed."
    this is not a compile error but a runtime error with mil_run interpreter
        i := -1;
    converts to
        = i, -1
    to fix this have to do something like
        . tmp
        - tmp, 0, 1
        = i, tmp

    ---> still have not done the =[] since this probably requires emitting some code with temporary variables
    probably have to declare a temp store the value for the array there, then store the temp into the destination


* read/write (fixme)
    form of "read/write vars" for the pattern
    when it goes to var rule then ids are added to the rwvarslst vector.
    when in read/write has to check type and decide int or array
    then in loop the mil is output (similar to the declaration rule)
    this works for integers, in var rule the id name is in yylval.sval is appended to rwvarslst,
    it work for arrays but for arrays it is more complicated because of syntax, have to get the last id in the idslst and append to rwvarslst
    with arrays the yylval.ival/yylval.sval is the index to read/write

    ---> cant get it to work with variable index, this will out put 2 reads to the variable index instead


* declarations/identifiers
    so far the code is in and "declaration/declarationsP" and "identifer/identifierF"

    when multiple identifiers declared on one line then multiple "." is generated for each id later in a loop after names are collected.
        i, j : integer;

    names are collected in identifier the strings are put into idslst vector
    when that part returns to the declaration a loop will add ids to symtab if not yet in.
    then the mil code is output in the same loop

    adding to symbol table in the declaration part with a loop something like
        symtab[*yylval.sval] = "0";
        symtab[*yylval.sval] = to_string(yylval.ival); // yylval.ival is # of elements

    note because of the way distinguish between scalar and array with scalar size == 0
    there can be no empty arrays, ie. arrays must be size >= 1

    it looks like arrays elements default value is set to 0 automatically

    add an identifierF for functions so they dont get names added to symbol table
    this is used where an identifer name is for a function
        in the function rule
        in term rule for function calls

    add declarationsP so can initialize the parameters to the positional arguments $0, $1, ...
    need to add another declarations part to tell when entering where the parameters are declared, since in different section.
    trying to do similar to the way function identifierF works with a rule declarationsP
    the parameters have to be initialized by the argument positions at the very beginning of functions.
    should be able to set a flag so when in declarations will output positions $0, $1, ...
    has to set pcnt flag in identifierF because declarationsP comes right after


* function layout
    each rule should write milcode strings to the vector milvec then when done goes to function rule
    in function rule output: "func", code from milvec, and "endfunc"
    save completed output to vector of strings where each string is the full mil code for a function
    after output clear the milvec vector
    also save symbol table to vector of maps

#----------------------------------------

DATA STRUCTURES: (the more important ones)

vector<string> expvec
    vector for the math expressions
    pushed to in number, sub number, and var

int neg
    set to 1 in in "term sub number"
    set to 0 after assign

int maths
    set to 1 in the expression
    set to 0 after assign

int pcnt
    used to tell if declaring parameter, so can output the position arguments
    set to 1 in identiferF
    set to 0 at the end of declarationsP

int pnum
    used to count the parameters when outputting the positional arguments $0, $1, ...
    incremented in the declaration loop
    reset to 0 at the end of declarationsP

int fcnt
    used for output the name of a function as the first part of a MIL block
    save function name to a string,
    if fcnt == 0 write name to string stream and increment
    reset to 0 after the function is finished

int vtag
    used for helping differentiate the assign statements
    0 = num, set in term NUMBER
    1 = str, set in term var
    reset to -1 after each assign

vector<string> rwvarslst;
    read/write,assign list
    strings get appended in var rule. appends for READ, WRITE, ASSIGN
    clear after assign
    clear in read/write after loop
    clear in function after scope

vector<string> varidxlst;
    assign array index list
    strings get appended in var rule if is array
    will append either to_string(yylval.ival) or *yylval.sval

vector<string> idslst;
    id declare list
    strings get appended in identifier rule
    clear in declaration after loop
    clear in function after scope

map<string,string> symtab;
    function symbol table
    clear in declaration after loop
    clear in function after scope


