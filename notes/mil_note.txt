The MIL interpreter assumes the following about a MIL program:

1. Each line in the MIL file contains at most one MIL instruction
2. Each line is at most 254 characters long
3. All variables are defined before they are used
4. Functions begin with a line of the form "func name" and end with the line "endfunc"

Functions in the MIL language:

Functions in the MIL language start with a line of the form "func name" and end with the line "endfunc".
Parameters are passed to mil functions with the param command, and values are returned from functions.
Inside functions, arguments are referenced using a positional notation.
For example, the first argument specified with the param instruction prior to the current function call would be accessible as the name $0.
All arguments are passed by value, and recursive function calls are supported.
A semantically valid MIL program must contain a function named main.
All functions (with the exception of main) must return a scalar value.
The main function must not return any value.

#----------------------------------------

the "=" is used in statement for ASSIGN, and maybe var

so far most of the hard work is in the rules "function" and "declaration" and "identifer/identifierF"

    when multiple identifiers declared on one line then multiple "." is generated
        i, j : integer;

    names are collected in identifier and when that returns to declaration they are added to symtab if not yet in.
    adding to symbol table in the declaration part something like
        symtab[*yylval.sval] = "0";
        symtab[*yylval.sval] = "n"; where n is # of elements

    add an identifierF for functions so they dont get names added to symbol table
    this is used where an identifer name is for a function
        in the function rule
        in term rule for function calls

some of the rules are printing out weird/backwards/postfix because of the precedence

havent figured out to do labels

not sure how to tell when read/write to scalar/array has to check type and decide
it should work but it looks like its actually broken
writes/reads with arrays cause segfaults

