ident -> IDENT main
declarations -> epsilon
ident -> IDENT p1
declaration -> identifiers COLON INTEGER
ident -> IDENT p1
declaration -> identifiers COLON INTEGER
ident -> IDENT p3
declaration -> identifiers COLON INTEGER
ident -> IDENT p4
declaration -> identifiers COLON INTEGER
ident -> IDENT my_a
declaration -> identifiers COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER
declarations -> epsilon
declarations -> declaration SEMICOLON declarations
declarations -> declaration SEMICOLON declarations
declarations -> declaration SEMICOLON declarations
declarations -> declaration SEMICOLON declarations
declarations -> declaration SEMICOLON declarations
ident -> IDENT p1
var -> ident
vars -> var
statement -> READ vars
ident -> IDENT p1
var -> ident
vars -> var
statement -> WRITE vars
ident -> IDENT p2
var -> ident
vars -> var
statement -> READ vars
ident -> IDENT p2
var -> ident
vars -> var
statement -> WRITE vars
ident -> IDENT p3
var -> ident
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
statement -> var ASSIGN expression
ident -> IDENT p4
var -> ident
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
statement -> var ASSIGN expression
ident -> IDENT p1
var -> ident
ident -> IDENT p1
var -> ident
term -> var
multiplicative_expression -> term
ident -> IDENT p2
var -> ident
term -> var
multiplicative_expression -> term
expression -> multiplicative_expression
expression -> multiplicative_expression ADD multiplicative_expression
statement -> var ASSIGN expression
ident -> IDENT p2
var -> ident
ident -> IDENT p2
var -> ident
term -> var
ident -> IDENT p3
var -> ident
term -> var
multiplicative_expression -> term MULT term
expression -> multiplicative_expression
statement -> var ASSIGN expression
ident -> IDENT p1
var -> ident
term -> NUMBER
multiplicative_expression -> term
term -> NUMBER
term -> NUMBER
multiplicative_expression -> term MULT term
term -> NUMBER
term -> NUMBER
multiplicative_expression -> term DIV term
expression -> multiplicative_expression
expression -> multiplicative_expression SUB multiplicative_expression
expression -> multiplicative_expression ADD multiplicative_expression
statement -> var ASSIGN expression
ident -> IDENT p3
var -> ident
term -> var
multiplicative_expression -> term
expression -> multiplicative_expression
comp -> LT
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
relation_exp -> expression comp expression
relation_and_exp -> relation_exp
bool_exp -> relation_and_exp
ident -> IDENT p3
var -> ident
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
statement -> var ASSIGN expression
statements -> epsilon
statements -> statement SEMICOLON statements
ident -> IDENT p3
var -> ident
ident -> IDENT p3
var -> ident
term -> var
multiplicative_expression -> term
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
expression -> multiplicative_expression ADD multiplicative_expression
statement -> var ASSIGN expression
statements -> epsilon
statements -> statement SEMICOLON statements
statement -> IF bool_exp THEN statements ELSE statements ENDIF
ident -> IDENT p4
var -> ident
term -> var
multiplicative_expression -> term
expression -> multiplicative_expression
comp -> GT
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
relation_exp -> expression comp expression
relation_and_exp -> relation_exp
bool_exp -> relation_and_exp
ident -> IDENT p4
var -> ident
ident -> IDENT p4
var -> ident
term -> var
multiplicative_expression -> term
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
expression -> multiplicative_expression SUB multiplicative_expression
statement -> var ASSIGN expression
statements -> epsilon
statements -> statement SEMICOLON statements
statement -> IF bool_exp THEN statements ENDIF
ident -> IDENT p1
var -> ident
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
statement -> var ASSIGN expression
ident -> IDENT p1
var -> ident
term -> var
multiplicative_expression -> term
expression -> multiplicative_expression
comp -> LTE
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
relation_exp -> expression comp expression
relation_and_exp -> relation_exp
bool_exp -> relation_and_exp
ident -> IDENT p1
var -> ident
ident -> IDENT p1
var -> ident
term -> var
multiplicative_expression -> term
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
expression -> multiplicative_expression ADD multiplicative_expression
statement -> var ASSIGN expression
ident -> IDENT p2
var -> ident
ident -> IDENT p2
var -> ident
term -> var
multiplicative_expression -> term
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
expression -> multiplicative_expression ADD multiplicative_expression
statement -> var ASSIGN expression
statements -> epsilon
statements -> statement SEMICOLON statements
statements -> statement SEMICOLON statements
statement -> WHILE bool_exp BEGINLOOP statements ENDLOOP
ident -> IDENT p2
var -> ident
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
statement -> var ASSIGN expression
ident -> IDENT p1
var -> ident
ident -> IDENT p1
var -> ident
term -> var
multiplicative_expression -> term
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
expression -> multiplicative_expression ADD multiplicative_expression
statement -> var ASSIGN expression
ident -> IDENT p2
var -> ident
ident -> IDENT p2
var -> ident
term -> var
multiplicative_expression -> term
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
expression -> multiplicative_expression SUB multiplicative_expression
statement -> var ASSIGN expression
statements -> epsilon
statements -> statement SEMICOLON statements
statements -> statement SEMICOLON statements
ident -> IDENT p2
var -> ident
term -> var
multiplicative_expression -> term
expression -> multiplicative_expression
comp -> GTE
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
relation_exp -> expression comp expression
relation_and_exp -> relation_exp
bool_exp -> relation_and_exp
statement -> DO BEGINLOOP statements ENDLOOP WHILE bool_exp
ident -> IDENT p1
var -> ident
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
statement -> var ASSIGN expression
ident -> IDENT p1
var -> ident
term -> var
multiplicative_expression -> term
expression -> multiplicative_expression
comp -> LT
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
relation_exp -> expression comp expression
relation_and_exp -> relation_exp
bool_exp -> relation_and_exp
ident -> IDENT my_a
ident -> IDENT p1
var -> ident
term -> var
multiplicative_expression -> term
expression -> multiplicative_expression
var -> ident L_SQUARE_BRACKET expression R_SQUARE_BRACKET
ident -> IDENT p2
var -> ident
term -> var
multiplicative_expression -> term
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
expression -> multiplicative_expression ADD multiplicative_expression
statement -> var ASSIGN expression
ident -> IDENT p1
var -> ident
ident -> IDENT p1
var -> ident
term -> var
multiplicative_expression -> term
term -> NUMBER
multiplicative_expression -> term
expression -> multiplicative_expression
expression -> multiplicative_expression ADD multiplicative_expression
statement -> var ASSIGN expression
statements -> epsilon
statements -> statement SEMICOLON statements
statements -> statement SEMICOLON statements
statement -> WHILE bool_exp BEGINLOOP statements ENDLOOP
ident -> IDENT p1
var -> ident
ident -> IDENT f0
parser yyerror at Line 49, position 15: syntax error, unexpected R_PAREN, expecting SUB or L_PAREN or IDENT or NUMBER
